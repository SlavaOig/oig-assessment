@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(MainLayout)">
                <NotAuthorized>
                    @if (isCheckingAuth)
                    {
                        <p>Checking authentication...</p>
                    }
                    else
                    {
                        <RedirectToLogin />
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <h3>Page not found!</h3>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private bool isAuthenticated;
    private bool isCheckingAuth = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated == true;

        if (!isAuthenticated)
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                isAuthenticated = true;
            }
        }

        isCheckingAuth = false;
        StateHasChanged();
    }
}